// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: follower/follower-service.proto

package follower

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowerService_Follow_FullMethodName             = "/follower.FollowerService/Follow"
	FollowerService_IsFollowing_FullMethodName        = "/follower.FollowerService/IsFollowing"
	FollowerService_GetRecommendations_FullMethodName = "/follower.FollowerService/GetRecommendations"
	FollowerService_Unfollow_FullMethodName           = "/follower.FollowerService/Unfollow"
	FollowerService_GetFollowing_FullMethodName       = "/follower.FollowerService/GetFollowing"
	FollowerService_GetFollowers_FullMethodName       = "/follower.FollowerService/GetFollowers"
)

// FollowerServiceClient is the client API for FollowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerServiceClient interface {
	Follow(ctx context.Context, in *MultiIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	IsFollowing(ctx context.Context, in *MultiIdRequest, opts ...grpc.CallOption) (*IsFollowingResponse, error)
	GetRecommendations(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MultiIdResponse, error)
	Unfollow(ctx context.Context, in *MultiIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetFollowing(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MultiIdResponse, error)
	GetFollowers(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MultiIdResponse, error)
}

type followerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerServiceClient(cc grpc.ClientConnInterface) FollowerServiceClient {
	return &followerServiceClient{cc}
}

func (c *followerServiceClient) Follow(ctx context.Context, in *MultiIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, FollowerService_Follow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) IsFollowing(ctx context.Context, in *MultiIdRequest, opts ...grpc.CallOption) (*IsFollowingResponse, error) {
	out := new(IsFollowingResponse)
	err := c.cc.Invoke(ctx, FollowerService_IsFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetRecommendations(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MultiIdResponse, error) {
	out := new(MultiIdResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetRecommendations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) Unfollow(ctx context.Context, in *MultiIdRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, FollowerService_Unfollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetFollowing(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MultiIdResponse, error) {
	out := new(MultiIdResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followerServiceClient) GetFollowers(ctx context.Context, in *Request, opts ...grpc.CallOption) (*MultiIdResponse, error) {
	out := new(MultiIdResponse)
	err := c.cc.Invoke(ctx, FollowerService_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerServiceServer is the server API for FollowerService service.
// All implementations must embed UnimplementedFollowerServiceServer
// for forward compatibility
type FollowerServiceServer interface {
	Follow(context.Context, *MultiIdRequest) (*EmptyResponse, error)
	IsFollowing(context.Context, *MultiIdRequest) (*IsFollowingResponse, error)
	GetRecommendations(context.Context, *Request) (*MultiIdResponse, error)
	Unfollow(context.Context, *MultiIdRequest) (*EmptyResponse, error)
	GetFollowing(context.Context, *Request) (*MultiIdResponse, error)
	GetFollowers(context.Context, *Request) (*MultiIdResponse, error)
	mustEmbedUnimplementedFollowerServiceServer()
}

// UnimplementedFollowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerServiceServer struct {
}

func (UnimplementedFollowerServiceServer) Follow(context.Context, *MultiIdRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowerServiceServer) IsFollowing(context.Context, *MultiIdRequest) (*IsFollowingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollowing not implemented")
}
func (UnimplementedFollowerServiceServer) GetRecommendations(context.Context, *Request) (*MultiIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendations not implemented")
}
func (UnimplementedFollowerServiceServer) Unfollow(context.Context, *MultiIdRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedFollowerServiceServer) GetFollowing(context.Context, *Request) (*MultiIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowing not implemented")
}
func (UnimplementedFollowerServiceServer) GetFollowers(context.Context, *Request) (*MultiIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedFollowerServiceServer) mustEmbedUnimplementedFollowerServiceServer() {}

// UnsafeFollowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerServiceServer will
// result in compilation errors.
type UnsafeFollowerServiceServer interface {
	mustEmbedUnimplementedFollowerServiceServer()
}

func RegisterFollowerServiceServer(s grpc.ServiceRegistrar, srv FollowerServiceServer) {
	s.RegisterService(&FollowerService_ServiceDesc, srv)
}

func _FollowerService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).Follow(ctx, req.(*MultiIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_IsFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).IsFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_IsFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).IsFollowing(ctx, req.(*MultiIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetRecommendations(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).Unfollow(ctx, req.(*MultiIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowing(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowerService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerServiceServer).GetFollowers(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerService_ServiceDesc is the grpc.ServiceDesc for FollowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "follower.FollowerService",
	HandlerType: (*FollowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _FollowerService_Follow_Handler,
		},
		{
			MethodName: "IsFollowing",
			Handler:    _FollowerService_IsFollowing_Handler,
		},
		{
			MethodName: "GetRecommendations",
			Handler:    _FollowerService_GetRecommendations_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _FollowerService_Unfollow_Handler,
		},
		{
			MethodName: "GetFollowing",
			Handler:    _FollowerService_GetFollowing_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _FollowerService_GetFollowers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "follower/follower-service.proto",
}
