// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tour/tour-service.proto

package tour

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TourService_GetById_FullMethodName        = "/tour.TourService/GetById"
	TourService_GetAll_FullMethodName         = "/tour.TourService/GetAll"
	TourService_GetAllByAuthor_FullMethodName = "/tour.TourService/GetAllByAuthor"
	TourService_Create_FullMethodName         = "/tour.TourService/Create"
	TourService_Update_FullMethodName         = "/tour.TourService/Update"
	TourService_Delete_FullMethodName         = "/tour.TourService/Delete"
)

// TourServiceClient is the client API for TourService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TourServiceClient interface {
	GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Tour, error)
	GetAll(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ToursResponse, error)
	GetAllByAuthor(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ToursResponse, error)
	Create(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error)
	Update(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error)
	Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type tourServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourServiceClient(cc grpc.ClientConnInterface) TourServiceClient {
	return &tourServiceClient{cc}
}

func (c *tourServiceClient) GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAll(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*ToursResponse, error) {
	out := new(ToursResponse)
	err := c.cc.Invoke(ctx, TourService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) GetAllByAuthor(ctx context.Context, in *UserIdRequest, opts ...grpc.CallOption) (*ToursResponse, error) {
	out := new(ToursResponse)
	err := c.cc.Invoke(ctx, TourService_GetAllByAuthor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) Create(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) Update(ctx context.Context, in *Tour, opts ...grpc.CallOption) (*Tour, error) {
	out := new(Tour)
	err := c.cc.Invoke(ctx, TourService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourServiceClient) Delete(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, TourService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourServiceServer is the server API for TourService service.
// All implementations must embed UnimplementedTourServiceServer
// for forward compatibility
type TourServiceServer interface {
	GetById(context.Context, *IdRequest) (*Tour, error)
	GetAll(context.Context, *EmptyRequest) (*ToursResponse, error)
	GetAllByAuthor(context.Context, *UserIdRequest) (*ToursResponse, error)
	Create(context.Context, *Tour) (*Tour, error)
	Update(context.Context, *Tour) (*Tour, error)
	Delete(context.Context, *IdRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedTourServiceServer()
}

// UnimplementedTourServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTourServiceServer struct {
}

func (UnimplementedTourServiceServer) GetById(context.Context, *IdRequest) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTourServiceServer) GetAll(context.Context, *EmptyRequest) (*ToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTourServiceServer) GetAllByAuthor(context.Context, *UserIdRequest) (*ToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByAuthor not implemented")
}
func (UnimplementedTourServiceServer) Create(context.Context, *Tour) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTourServiceServer) Update(context.Context, *Tour) (*Tour, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTourServiceServer) Delete(context.Context, *IdRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTourServiceServer) mustEmbedUnimplementedTourServiceServer() {}

// UnsafeTourServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourServiceServer will
// result in compilation errors.
type UnsafeTourServiceServer interface {
	mustEmbedUnimplementedTourServiceServer()
}

func RegisterTourServiceServer(s grpc.ServiceRegistrar, srv TourServiceServer) {
	s.RegisterService(&TourService_ServiceDesc, srv)
}

func _TourService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAll(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_GetAllByAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).GetAllByAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_GetAllByAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).GetAllByAuthor(ctx, req.(*UserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).Create(ctx, req.(*Tour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tour)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).Update(ctx, req.(*Tour))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourServiceServer).Delete(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourService_ServiceDesc is the grpc.ServiceDesc for TourService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tour.TourService",
	HandlerType: (*TourServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _TourService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TourService_GetAll_Handler,
		},
		{
			MethodName: "GetAllByAuthor",
			Handler:    _TourService_GetAllByAuthor_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TourService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TourService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TourService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour/tour-service.proto",
}

const (
	TouristPositionService_GetById_FullMethodName     = "/tour.TouristPositionService/GetById"
	TouristPositionService_GetByUserId_FullMethodName = "/tour.TouristPositionService/GetByUserId"
	TouristPositionService_Create_FullMethodName      = "/tour.TouristPositionService/Create"
	TouristPositionService_Update_FullMethodName      = "/tour.TouristPositionService/Update"
)

// TouristPositionServiceClient is the client API for TouristPositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TouristPositionServiceClient interface {
	GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TouristPosition, error)
	GetByUserId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TouristPosition, error)
	Create(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*TouristPosition, error)
	Update(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*TouristPosition, error)
}

type touristPositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTouristPositionServiceClient(cc grpc.ClientConnInterface) TouristPositionServiceClient {
	return &touristPositionServiceClient{cc}
}

func (c *touristPositionServiceClient) GetById(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TouristPosition, error) {
	out := new(TouristPosition)
	err := c.cc.Invoke(ctx, TouristPositionService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touristPositionServiceClient) GetByUserId(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*TouristPosition, error) {
	out := new(TouristPosition)
	err := c.cc.Invoke(ctx, TouristPositionService_GetByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touristPositionServiceClient) Create(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*TouristPosition, error) {
	out := new(TouristPosition)
	err := c.cc.Invoke(ctx, TouristPositionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *touristPositionServiceClient) Update(ctx context.Context, in *TouristPosition, opts ...grpc.CallOption) (*TouristPosition, error) {
	out := new(TouristPosition)
	err := c.cc.Invoke(ctx, TouristPositionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TouristPositionServiceServer is the server API for TouristPositionService service.
// All implementations must embed UnimplementedTouristPositionServiceServer
// for forward compatibility
type TouristPositionServiceServer interface {
	GetById(context.Context, *IdRequest) (*TouristPosition, error)
	GetByUserId(context.Context, *IdRequest) (*TouristPosition, error)
	Create(context.Context, *TouristPosition) (*TouristPosition, error)
	Update(context.Context, *TouristPosition) (*TouristPosition, error)
	mustEmbedUnimplementedTouristPositionServiceServer()
}

// UnimplementedTouristPositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTouristPositionServiceServer struct {
}

func (UnimplementedTouristPositionServiceServer) GetById(context.Context, *IdRequest) (*TouristPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedTouristPositionServiceServer) GetByUserId(context.Context, *IdRequest) (*TouristPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserId not implemented")
}
func (UnimplementedTouristPositionServiceServer) Create(context.Context, *TouristPosition) (*TouristPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTouristPositionServiceServer) Update(context.Context, *TouristPosition) (*TouristPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTouristPositionServiceServer) mustEmbedUnimplementedTouristPositionServiceServer() {
}

// UnsafeTouristPositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TouristPositionServiceServer will
// result in compilation errors.
type UnsafeTouristPositionServiceServer interface {
	mustEmbedUnimplementedTouristPositionServiceServer()
}

func RegisterTouristPositionServiceServer(s grpc.ServiceRegistrar, srv TouristPositionServiceServer) {
	s.RegisterService(&TouristPositionService_ServiceDesc, srv)
}

func _TouristPositionService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouristPositionService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).GetById(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouristPositionService_GetByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).GetByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouristPositionService_GetByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).GetByUserId(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouristPositionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouristPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouristPositionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).Create(ctx, req.(*TouristPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _TouristPositionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TouristPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TouristPositionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TouristPositionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TouristPositionServiceServer).Update(ctx, req.(*TouristPosition))
	}
	return interceptor(ctx, in, info, handler)
}

// TouristPositionService_ServiceDesc is the grpc.ServiceDesc for TouristPositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TouristPositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tour.TouristPositionService",
	HandlerType: (*TouristPositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _TouristPositionService_GetById_Handler,
		},
		{
			MethodName: "GetByUserId",
			Handler:    _TouristPositionService_GetByUserId_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TouristPositionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TouristPositionService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tour/tour-service.proto",
}
