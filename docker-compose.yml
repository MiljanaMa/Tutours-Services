version: "3.9"

services:
  db:
    image: postgres:latest
    restart: always
    networks:
      - database
    ports:
      - "5432:5432"
    volumes:
      - ./db_init.sh:/docker-entrypoint-initdb.d/db_init.sh
      - type: bind
        source: ./BACK/scripts/tutours-db-backup.sql
        target: /tmp/explorer-init.sql
      - type: bind
        source: ./TOURS_MS/tours.sql
        target: /tmp/tours-init.sql
      - type: bind
        source: ./ENCOUNTERS-MS/encounters.sql
        target: /tmp/encounters-init.sql 
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: super
      POSTGRES_MULTIPLE_DATABASES: tours,explorer,encounters
      PGPORT: 5432
      PGUSER: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 20s
      retries: 5
      start_period: 30s

  monolit:
    build:
      context: ./BACK
      target: final
    networks:
      - database
    ports:
      - "44333:80"
    restart: on-failure
    environment:
      DATABASE_HOST: db
      DATABASE_PORT: 5432
      DATABASE_PASSWORD: super
      DATABASE_USER: postgres
      DATABASE_SCHEMA: explorer
      TOUR_HOST: tour
      TOUR_PORT: 8000
      ENCOUNTER_HOST: encounter
      ENCOUNTER_PORT: 8083
      FOLLOWER_HOST: follower
      FOLLOWER_PORT: 8095
    depends_on:
      db:
          condition: service_healthy
      tour:
          condition: service_started
      encounter:
          condition: service_started
      

  encounter:
    build: 
      context: ./ENCOUNTERS-MS
    restart: on-failure
    ports:
      - "8083:8083"
    networks:
      - database
    environment:
      DB_USER_E: postgres
      DB_PASSWORD_E: super
      DB_PORT_E: 5432
      DB_DATABASE_E: encounters
      DB_HOST_E: db
    depends_on:
      db:
        condition: service_healthy
      
  tour:
    build: 
      context: ./TOURS_MS
    restart: on-failure
    ports:
      - "8000:8000"
    networks:
      - database
    environment:
      DB_USER: postgres
      DB_PASSWORD: super
      DB_PORT: 5432
      DB_DATABASE: tours
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy

  follower:
    build:
      context: ./FOLLOWERS-MS
    restart: on-failure
    networks:
      - database
    ports:
      - "8095:8095"
    environment:
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=12345678
    depends_on:
      neo4j:
        condition: service_healthy

   # NoSQL: Neo4J DB
  neo4j:
    image: neo4j
    restart: always
    networks:
      - database
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p 12345678 || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/12345678
    volumes:
      - neo4j_data:/data
      
volumes:
  neo4j_data:

networks:
  database:
    name: database
    driver: bridge
